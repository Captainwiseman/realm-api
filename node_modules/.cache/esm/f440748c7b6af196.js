let utils,readInitialJSONConfig,dbModule,log,_,buildWorld;_7b6‍.x([["buildInitialRealms",()=>buildInitialRealms],["updateRealmsBuild",()=>updateRealmsBuild],["readRealmsData",()=>readRealmsData],["default",()=>_7b6‍.o]]);_7b6‍.w("./realmsUtils",[["default",["utils"],function(v){utils=v}]]);_7b6‍.w("../data-modules/configsModule",[["readInitialJSONConfig",["readInitialJSONConfig"],function(v){readInitialJSONConfig=v}]]);_7b6‍.w("../data-modules/dbModule",[["default",["dbModule"],function(v){dbModule=v}]]);_7b6‍.w("../../common/log",[["default",["log"],function(v){log=v}]]);_7b6‍.w("lodash",[["default",["_"],function(v){_=v}]]);_7b6‍.w("../worldModule",[["buildWorld",["buildWorld"],function(v){buildWorld=v}]]);






       const buildInitialRealms = async extraRealmDetails => {
  const realmsRaw = await _7b6‍.a("readInitialJSONConfig",readInitialJSONConfig)("realms");
  const buildFor = extraRealmDetails.numberOfPlayers

  // Will Add the ability to create and distribute players around realms
  // depends on the number of players and choosen groups
  const numberOfActiveRealms = _7b6‍.a("buildWorld",buildWorld)
  const numberOfLandsPerRealm = buildFor

  let lands = extraRealmDetails.lands;

  const realmsBuilt = realmsRaw.map(realm => {
    realm.ownedLands = _7b6‍.a("_",_).take(lands, 6);
    lands = _7b6‍.a("_",_).drop(lands, 6);

    realm.overallPopulation = _7b6‍.a("_",_).sumBy(realm.ownedLands, land => {
      return land.population;
    });
    return realm;
  });

  return realmsBuilt;
};;_7b6‍.j(["buildInitialRealms"]);

       const updateRealmsBuild = async currentRealms => {
  const uptoDateRealms = await Promise.all();

  return uptoDateRealms;
};;_7b6‍.j(["updateRealmsBuild"]);

       const readRealmsData = async () => {
  _7b6‍.a("log",log)("Requested Live Realms", "engine");
  return await _7b6‍.a("dbModule",dbModule).readAllRealmsDataFromDB();
};;_7b6‍.j(["readRealmsData"]);

_7b6‍.d({
  buildInitialRealms,
  updateRealmsBuild,
  readRealmsData
});_7b6‍.j(["default"]);