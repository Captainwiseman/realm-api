let utils,readInitialJSONConfig,dbModule,_,log;_7b6‍.x([["buildInitialLands",()=>buildInitialLands],["updateLandsBuild",()=>updateLandsBuild],["readLandsData",()=>readLandsData],["default",()=>_7b6‍.o]]);_7b6‍.w("./landsUtils",[["default",["utils"],function(v){utils=v}]]);_7b6‍.w("../data-modules/configsModule",[["readInitialJSONConfig",["readInitialJSONConfig"],function(v){readInitialJSONConfig=v}]]);_7b6‍.w("../data-modules/dbModule",[["default",["dbModule"],function(v){dbModule=v}]]);_7b6‍.w("lodash",[["default",["_"],function(v){_=v}]]);_7b6‍.w("../../common/log",[["default",["log"],function(v){log=v}]]);





const populationPerClusterOfLands = 300000;

       const buildInitialLands = async () => {
  const lands = await readInitialJSONConfig("lands");
  const shuffledLands = _.shuffle(lands);
  const dividedLands = _.chunk(shuffledLands, 6);
  const populatedDividedLands = utils.evenlyDistributePopulation(
    dividedLands,
    populationPerClusterOfLands
  );
  return populatedDividedLands;
};

       const updateLandsBuild = async () => {};

       const readLandsData = async () => {
  log("Requested Live Lands", "engine");
  return await dbModule.readAllLandsDataFromDB();
};

_7b6‍.d({
  buildInitialLands,
  updateLandsBuild,
  readLandsData
});